import logging

from fastapi import APIRouter, Request, Response
from vkbottle import VKAPIError
from vkbottle.bot import Bot, Message

import settings
from app.db import add_group, delete_group, groups_ids, ids_by_course

app = APIRouter(prefix="/api", tags=["API"])

bot = Bot(settings.VK_TOKEN)

bot.labeler.vbml_ignore_case = True


async def broadcast(
    courses: str, text: str | None = None, attachment: list | None = None
) -> None:
    for course in courses:
        for group in ids_by_course(int(course)):
            try:
                await bot.api.messages.send(
                    peer_id=(settings.GROUP_ID_COEFFICIENT + group),
                    message=text,
                    attachment=attachment,
                    random_id=0,
                )
            except VKAPIError[7] as exception:
                logging.warning(exception)
                delete_group(group)
            except VKAPIError as exception:
                logging.error(exception)

async def process_course(course: str | int) -> int:
    if course == "admin":
        return -1
    if isinstance(course, str) and course.isnumeric():
        return int(course)
    return 0

@bot.on.chat_message(text="–†–∞—Å—Å—ã–ª–∫–∞: <courses>, –¢–µ–∫—Å—Ç <text>")
async def sharing_text(message: Message, courses: str, text: str) -> None:
    if message.from_id not in settings.ADMINS:
        return
    await broadcast(courses, text=text)


@bot.on.chat_message(text="–†–∞—Å—Å—ã–ª–∫–∞: <courses>, –ü–æ—Å—Ç")
async def share_publication(message: Message, courses: str) -> None:
    if message.from_id not in settings.ADMINS:
        return
    attachment = message.get_wall_attachment()
    if len(attachment) != 0:
        attachment = attachment[0]
        await broadcast(
            courses, attachment=[f"wall{attachment.owner_id}_{attachment.id}"]
        )
    else:
        message.forward("–û—à–∏–±–∫–∞ –ø–æ—Å—Ç –Ω–µ –±—ã–ª –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω!")


@bot.on.chat_message(text="–†–∞—Å—Å—ã–ª–∫–∞: <courses>, –°–æ–æ–±—â–µ–Ω–∏–µ")
async def share_message(message: Message, courses: str) -> None:
    if message.from_id not in settings.ADMINS:
        return

    if message.fwd_messages:
        await broadcast(courses, text=message.fwd_messages[0].text)
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")


@bot.on.chat_message(text="–ò–∑–º–µ–Ω–∏—Ç—å <course>")
async def change_course(message: Message, course: str | int) -> None:
    if (course := process_course(course)) == 0:
        await message.answer("–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –∫—É—Ä—Å!")
        return

@bot.on.chat_message(text="–î–æ–±–∞–≤–∏—Ç—å <course>")
async def add(message: Message, course: str | int) -> None:
    if (course := process_course(course)) == 0:
        await message.answer("–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –∫—É—Ä—Å!")
        return

    if int(course) not in (-1, 1, 2, 3, 4, 5):
        await message.answer("–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –∫—É—Ä—Å!")
        return

    group_id = message.peer_id - settings.GROUP_ID_COEFFICIENT

    if group_id in groups_ids():
        await message.answer("–í–∞—à–∞ –±–µ—Å–µ–¥–∞ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ")
        return

    add_group(group_id, course)

    await message.answer("–í–∞—à–∞ –±–µ—Å–µ–¥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ—Å–µ–¥—É!\n\n"
        "–≠—Ç–æ—Ç —á–∞—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è "
        f"—Å—Ç—É–¥–µ–Ω—Ç–æ–≤ {course} –∫—É—Ä—Å–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –ò–ö–°–°. "
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, "
        "–∫–æ—Ç–æ—Ä—É—é –≤—ã –æ–±—è–∑–∞–Ω—ã –∑–Ω–∞—Ç—å!\n\n"
        "–í –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª–∞, –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å –Ω–∏–º–∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.\n"
        "üüß–ü–∏—Å–∞—Ç—å –∑–¥–µ—Å—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ:\n"
        "üëâüèº –°—Ç–∞—Ä–æ—Å—Ç–∞\n"
        "üëâüèº –ó–∞–º. —Å—Ç–∞—Ä–æ—Å—Ç—ã\n"
        "üëâüèº –ë–æ—Ç\n"
        "–î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω "
        "—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
        "üüß–ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ "
        "—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∏—Ö —Å–æ —Å—Ç–∞—Ä–æ—Å—Ç–æ–π –∏–ª–∏ –µ–≥–æ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º.\n\n"
        "üüß –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:\n"
        "‚úÖ–ë–æ—Ç –≤ –¢–µ–ª–µ–≥—Ä–∞–º: https://t.me/BonchGUTBot\n"
        "‚úÖ–°–∞–π—Ç –ë–æ–Ω—á–∞: https://www.sut.ru\n"
        "‚úÖ–ì–£–¢.–ù–∞–≤–∏–≥–∞—Ç–æ—Ä: https://nav.sut.ru/?cab=k2-117\n"
        "‚úÖ–°—Ç—É–¥–≥–æ—Ä–æ–¥–æ–∫: https://vk.com/campusut\n"
        "‚úÖ–§–∞–∫—É–ª—å—Ç–µ—Ç –ò–ö–°–°: https://vk.com/iksssut\n"
        "‚úÖ–ì—Ä—É–ø–ø–∞ –°–ü–±–ì–£–¢: https://vk.com/sutru\n"
        "‚úÖ–°—Ç—É–¥—Å–æ–≤–µ—Ç: https://vk.com/studsovet.bonch\n"
        "‚úÖInGUT: https://vk.com/ingut\n"
        "‚úÖ–ü–æ–¥—Å–ª—É—à–∞–Ω–æ –ë–æ–Ω—á: https://vk.com/overhear_bonch\n"
        "‚úÖBonch Media: https://vk.com/bonch.media\n"
        "‚úÖMemgut: https://vk.com/bonchmemes\n"
        "‚úÖ–ì—É—Ç–∫–∞: https://vk.com/gutka_sut\n"
        "‚úÖ–ü–µ—Ä–≤–æ–∫—É—Ä—Å–Ω–∏–∫–∏ –°–ü–±–ì–£–¢: https://vk.com/onegut\n\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—Å–∞—Ç—å @pavel.cmake(—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É)"
    )


@bot.on.chat_message(text="–ü–æ–º–æ—â—å")
async def user_help(message: Message) -> None:
    if message.from_id in settings.ADMINS:
        await message.answer(
            "–ö–æ–º–∞–Ω–¥—ã:\n\n"
            "–î–æ–±–∞–≤–∏—Ç—å <course> - –î–æ–±–∞–≤–ª—è–µ—Ç –±–µ—Å–µ–¥—É –≤ –ë–î, "
            "—Ñ–ª–∞–≥ admin –∑–Ω–∞—á–∏—Ç —á—Ç–æ –≤ –±–µ—Å–µ–¥—É –Ω–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏\n\n"
            "–†–∞—Å—Å—ã–ª–∫–∞: <courses>, –°–æ–æ–±—â–µ–Ω–∏–µ - "
            "–†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
            "–†–∞—Å—Å—ã–ª–∫–∞: <courses>, –ü–æ—Å—Ç - –†–∞—Å—Å—ã–ª–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –ø–æ—Å—Ç\n\n"
            "–†–∞—Å—Å—ã–ª–∫–∞: <courses>, –¢–µ–∫—Å—Ç <text> - –†–∞—Å—Å—ã–ª–∞–µ—Ç –Ω–∞–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
        )


@app.post("/callback")
async def callback(request: Request) -> Response:
    data = await request.json()
    if data.get("type") == "confirmation" and data.get("group_id") == int(
        settings.GROUP_ID
    ):
        return Response(
            media_type="text/plain", content=settings.CONFIRMATION_TOKEN
        )
    await bot.process_event(data)
    return Response(media_type="text/plain", content="ok")
